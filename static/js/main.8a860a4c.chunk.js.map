{"version":3,"sources":["App.js","serviceWorker.js","firebaseConfig.js","index.js"],"names":["App","useState","FlagVideo","setFlagVideo","UserName","setUserName","Cont","setCont","Progression","setProgression","unityContent","UnityContent","process","on","flag","name","progressionVal","storage","firebase","database","capturing","setCapturing","recordedChunks","setRecordedChunks","webcamRef","useRef","mediaRecorderRef","handleDataAvailable","useCallback","data","size","prev","concat","handleStartCaptureClick","current","MediaRecorder","stream","mimeType","addEventListener","start","handleStopCaptureClick","stop","handleSend","userName","console","log","length","blob","Blob","type","ref","put","then","snapshot","getDownloadURL","downloadURL","update","url","send","URL","createObjectURL","a","document","createElement","body","appendChild","style","href","download","click","window","revokeObjectURL","className","height","display","role","width","aria-valuenow","aria-valuemin","aria-valuemax","audio","onClick","Boolean","location","hostname","match","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8a860a4c.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\nimport Unity, { UnityContent } from \"react-unity-webgl\";\nimport Webcam from \"react-webcam\";\n\nimport * as firebase from \"firebase\";\n\nfunction App() {\n  const [FlagVideo, setFlagVideo] = useState(0);\n  const [UserName, setUserName] = useState(\"\");\n  const [Cont, setCont] = useState(1);\n  const [Progression, setProgression] = useState(0);\n\n  const unityContent = new UnityContent(\n    process.env.PUBLIC_URL + \"/MyGame/360_vr3_build.json\",\n    process.env.PUBLIC_URL + \"/MyGame/UnityLoader.js\"\n  );\n\n  const nextQuestion = () => {\n    unityContent.send(\"MenuQuestion\", \"PlusNumber\");\n  };\n\n  unityContent.on(\"createVideo\", (flag) => {\n    setFlagVideo(flag);\n  });\n\n  unityContent.on(\"userName\", (name) => {\n    setUserName(name);\n  });\n\n  unityContent.on(\"progress\", (progressionVal) => {\n    setProgression(progressionVal * 100);\n  });\n\n  /* firebase  */\n  const storage = firebase.storage();\n  const database = firebase.database();\n\n  /* videoCapturing */\n  const [capturing, setCapturing] = useState(false);\n  const [recordedChunks, setRecordedChunks] = useState([]);\n  const webcamRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const handleDataAvailable = useCallback(\n    ({ data }) => {\n      if (data.size > 0) {\n        setRecordedChunks((prev) => prev.concat(data));\n      }\n    },\n    [setRecordedChunks]\n  );\n\n  const handleStartCaptureClick = useCallback(() => {\n    setCapturing(true);\n    mediaRecorderRef.current = new MediaRecorder(webcamRef.current.stream, {\n      mimeType: \"video/webm\",\n    });\n    mediaRecorderRef.current.addEventListener(\n      \"dataavailable\",\n      handleDataAvailable\n    );\n    mediaRecorderRef.current.start();\n  }, [handleDataAvailable]);\n\n  const handleStopCaptureClick = useCallback(() => {\n    mediaRecorderRef.current.stop();\n    setCapturing(false);\n  }, [mediaRecorderRef]);\n\n  const handleSend = useCallback(() => {\n    const userName = UserName;\n    console.log(userName);\n    if (recordedChunks.length) {\n      const blob = new Blob(recordedChunks, {\n        type: \"video/webm\",\n      });\n\n      /* send data to firebase */\n      const storageRef = storage.ref(\n        `/videos/${userName}/pregunta-${Cont}.webm`\n      );\n      storageRef.put(blob).then(function (snapshot) {\n        snapshot.ref.getDownloadURL().then((downloadURL) => {\n          console.log(downloadURL);\n          database\n            .ref(`users/${userName}/answers/${Cont}`)\n            .update({ url: downloadURL });\n          nextQuestion();\n          setFlagVideo(0);\n          setCont(2);\n        });\n        console.log(\"Uploaded a blob or file!\");\n      });\n\n      /* end sed data to firebase */\n\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      document.body.appendChild(a);\n      a.style = \"display: none\";\n      a.href = url;\n      a.download = `video-${userName}-pregunta-${Cont}.webm`;\n      a.click();\n      window.URL.revokeObjectURL(url);\n      setRecordedChunks([]);\n    }\n  }, [Cont, UserName, recordedChunks, storage]);\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row justify-content-center mt-4\">\n        <div\n          className=\"col-md-6\"\n          style={{\n            height: \"35em\",\n            display: FlagVideo !== 1 ? \"block\" : \"none\",\n          }}\n        >\n          <Unity unityContent={unityContent} />\n          {Progression >= 100 ? (\n            \"\"\n          ) : (\n            <div className=\"progress\">\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                style={{ width: `${Progression}%` }}\n                aria-valuenow={Progression}\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n              >{`${Progression}%`}</div>\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"row justify-content-center\">\n        {FlagVideo === 1 ? (\n          <div className=\"col-md-6\">\n            {/* <Webcam audio={true} videoConstraints={videoConstraints} /> */}\n            <Webcam audio={true} ref={webcamRef} />\n            {capturing ? (\n              <button\n                className=\"btn btn-danger\"\n                onClick={handleStopCaptureClick}\n              >\n                Parar Grabación\n              </button>\n            ) : (\n              <button\n                className=\"btn btn-success\"\n                onClick={handleStartCaptureClick}\n              >\n                Iniciar Grabación\n              </button>\n            )}\n            {recordedChunks.length > 0 && (\n              <button\n                className=\"btn btn-primary\"\n                onClick={() => handleSend(UserName)}\n              >\n                Descargar y Enviar\n              </button>\n            )}\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n      {FlagVideo === 1 ? \"hola\" : \"adios\"}\n      {UserName}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const firebaseConfig = {\n  apiKey: \"AIzaSyA3Gkt6AcTUQnbipSfIOEsD3Q9-a-OCosY\",\n  authDomain: \"vr-web-admin.firebaseapp.com\",\n  databaseURL: \"https://vr-web-admin.firebaseio.com\",\n  projectId: \"vr-web-admin\",\n  storageBucket: \"vr-web-admin.appspot.com\",\n  messagingSenderId: \"1043041595425\",\n  appId: \"1:1043041595425:web:edeb929f4faccc32bc7360\",\n};\n\nexport default firebaseConfig;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport * as firebase from \"firebase\";\nimport firebaseConfig from \"./firebaseConfig\";\n\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}